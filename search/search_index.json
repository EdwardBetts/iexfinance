{
    "docs": [
        {
            "location": "/",
            "text": "IEX Finance API\n\n\n\n\niexfinance is a Python 2.5+/3.6+ wrapper for the \nInvestors Exchange (IEX)\n \nAPI\n \n\n\nTable of Contents\n\n\n\n\nInstallation\n\n\nRequirements\n\n\n\n\n\n\nUsage\n\n\nObjects\n\n\nShare\n\n\nBatch\n\n\n\n\n\n\nUtilities\n\n\nTesting\n\n\nChangeLog\n\n\nAbout\n\n\nTutorial\n\n\n\n\nNote: all usage of this software must conform to the terms of the \nApache 2.0 Softare Licesnse\n and the IEX Developer API \nterms of use",
            "title": "Home"
        },
        {
            "location": "/#iex-finance-api",
            "text": "iexfinance is a Python 2.5+/3.6+ wrapper for the  Investors Exchange (IEX)   API",
            "title": "IEX Finance API"
        },
        {
            "location": "/#table-of-contents",
            "text": "Installation  Requirements    Usage  Objects  Share  Batch    Utilities  Testing  ChangeLog  About  Tutorial   Note: all usage of this software must conform to the terms of the  Apache 2.0 Softare Licesnse  and the IEX Developer API  terms of use",
            "title": "Table of Contents"
        },
        {
            "location": "/install/",
            "text": "Dependencies\n\n\niexfinance relies on:\n\n\n\n\npandas\n\n\nrequests\n\n\nsimplejson\n\n\nmock (testing)\n\n\nnose (testing)\n\n\n\n\nSee requirements.txt.\n\n\nInstallation\n\n\nLatest stable release via pip (recommended):\n\n\n$ pip install iexfinance\n\n\n\n\nLatest development version:\n\n\n$ pip install git+https://github.com/addisonlynch/iexfinance.git\n\n\n\n\nor\n\n\n $ git clone https://github.com/addisonlynch/iexfinance.git  \n $ cd iexfinance  \n $ pip install . \n\n\n\n\nNote:\n\n\nThe use of \nvirtualenv\n is recommended as below:\n\n\n$ pip install virtualenv\n$ virtualenv env\n$ source env/bin/activate",
            "title": "Installation"
        },
        {
            "location": "/install/#dependencies",
            "text": "iexfinance relies on:   pandas  requests  simplejson  mock (testing)  nose (testing)   See requirements.txt.",
            "title": "Dependencies"
        },
        {
            "location": "/install/#installation",
            "text": "Latest stable release via pip (recommended):  $ pip install iexfinance  Latest development version:  $ pip install git+https://github.com/addisonlynch/iexfinance.git  or   $ git clone https://github.com/addisonlynch/iexfinance.git  \n $ cd iexfinance  \n $ pip install .   Note:  The use of  virtualenv  is recommended as below:  $ pip install virtualenv\n$ virtualenv env\n$ source env/bin/activate",
            "title": "Installation"
        },
        {
            "location": "/usage/",
            "text": "Note: for a thorough, step-by-step walkthrough, see \ntutorial\n.\n\n\nThe simplest way to obtain data using the iexfinance wrapper is by calling the \nIexFinance\n function with a symbol (\nstr\n) or list of symbols (\nlist\n). \nIexFinance\n will return a \nShare\n object instance if given a single symbol and a \nBatch\n object instance if given a list. \n\n\nfrom iexfinance import IexFinance as iex\naapl = iex(\"aapl\")\n>>> aapl.get_price()\n#171.32\n\n\n\n\nIEX provides a list of symbols that are available for access, and as such, we provide a utility function \nutils.get_available_symbols\n to obtain this list (see \nUtilities\n). Invalid symbols will be met with a \nIEXSymbolError\n, and duplicate symbols will be kept intact without alteration.\n\n\nEndpoints\n\n\nThe Stock endpoints of the \nIEX Developer API\n are below, each of which contains data regarding a different aspect of the security/securities. Both the \nShare\n and \nBatch\n objects contain identically-signatured functions which can obtain each of these endpoints. Requests for single symbols (\nShare\n) will return the \nexact\n results from that endpoint as shown in the IEX API documentation (see below). Requests for multiple symbols (\nBatch\n) will return a symbol-indexed dictionary of the endpoint requested.\n\n\n\n\nQuote\n\n\nChart\n\n\nBook\n\n\nOpen / Close\n\n\nPrevious\n\n\nCompany\n\n\nKey Stats\n\n\nRelevant\n\n\nNews\n\n\nFinancials\n\n\nEarnings\n\n\nDividends\n \n\n\nSplits\n \n\n\nLogo\n \n\n\nPrice\n\n\nDelayed Quote\n\n\n~~List~~ (\nnot supported\n)\n\n\nEffective Spread\n\n\nVolume by Venue\n\n\n\n\nEndpoint Method\n Examples\n\nget_quote()\n, \n\nget_volume_by_venue()\n\n\nShare (single symbol)\n\n\n>>> aapl.get_previous()\n\n#{\"symbol\":\"AAPL\",\"date\":\"2017-11-16\",\"open\":171.18,\"high\":171.87,\"low\":170.3,\"close\":171.1,\n#\"volume\":23637484,\"unadjustedVolume\":23637484,\"change\":2.02,\"changePercent\":1.195,\n#\"vwap\":171.1673}\n\n\n\n\n\n\nFor a detailed list of the \nendpoint methods\n, see \nShare\n or \nBatch\n. \n\n\nDatapoints\n\n\nTo obtain individual datapoints from an endpoint, select \ndatapoint methods\n are also provided.\n\n\nExamples\n\nget_open()\n, \n\nget_name()\n\n\nShare (single symbol)\n\n\n>>> aapl.get_open()\n# 111.99\n>>> aapl.get_name()\n# Apple Inc.\n\n\n\n\n\n\nBatch (multiple symbols)\n\n\n\n>>> from iexfinance import IexFinance as iex\n>>> b = iex([\"AAPL\", \"TSLA\"])\n>>> b.get_open()\n#{\"AAPL\" : 111.99, \"TSLA\" : 299.93}\n>>> b.get_open()\n#{\"AAPL\" : \"Apple Inc.\", \"TSLA\" : \"Tesla Inc.\"}\n\n\n\n\nFor a detailed list of these functions, see \nShare\n or \nBatch\n.\n\n\nParameters\n\n\nCertain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.\n\n\naapl = iex(\"AAPL\", displayPercent=True)\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nEndpoint\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndisplayPercent\n\n\nquote\n\n\nFalse\n\n\n\n\n\n\nchartRange\n\n\nchart\n\n\n1m\n\n\n\n\n\n\nlast\n\n\nnews\n\n\n10\n\n\n\n\n\n\ndividendsRange\n\n\ndividends\n\n\n1m\n\n\n\n\n\n\nsplitsRange\n\n\nsplits\n\n\n1m\n\n\n\n\n\n\n\n\nNote: specifying options other than the defaults will \nsignificantly\n impact performance due to collision between the dividends and splits range options that require separate requests and merging. We have contacted IEX about this issue and hope to resolve it soon.",
            "title": "Usage"
        },
        {
            "location": "/usage/#endpoints",
            "text": "The Stock endpoints of the  IEX Developer API  are below, each of which contains data regarding a different aspect of the security/securities. Both the  Share  and  Batch  objects contain identically-signatured functions which can obtain each of these endpoints. Requests for single symbols ( Share ) will return the  exact  results from that endpoint as shown in the IEX API documentation (see below). Requests for multiple symbols ( Batch ) will return a symbol-indexed dictionary of the endpoint requested.   Quote  Chart  Book  Open / Close  Previous  Company  Key Stats  Relevant  News  Financials  Earnings  Dividends    Splits    Logo    Price  Delayed Quote  ~~List~~ ( not supported )  Effective Spread  Volume by Venue   Endpoint Method  Examples get_quote() ,  get_volume_by_venue()  Share (single symbol)  >>> aapl.get_previous()\n\n#{\"symbol\":\"AAPL\",\"date\":\"2017-11-16\",\"open\":171.18,\"high\":171.87,\"low\":170.3,\"close\":171.1,\n#\"volume\":23637484,\"unadjustedVolume\":23637484,\"change\":2.02,\"changePercent\":1.195,\n#\"vwap\":171.1673}  For a detailed list of the  endpoint methods , see  Share  or  Batch .",
            "title": "Endpoints"
        },
        {
            "location": "/usage/#datapoints",
            "text": "To obtain individual datapoints from an endpoint, select  datapoint methods  are also provided.  Examples get_open() ,  get_name()  Share (single symbol)  >>> aapl.get_open()\n# 111.99\n>>> aapl.get_name()\n# Apple Inc.  Batch (multiple symbols)  \n>>> from iexfinance import IexFinance as iex\n>>> b = iex([\"AAPL\", \"TSLA\"])\n>>> b.get_open()\n#{\"AAPL\" : 111.99, \"TSLA\" : 299.93}\n>>> b.get_open()\n#{\"AAPL\" : \"Apple Inc.\", \"TSLA\" : \"Tesla Inc.\"}  For a detailed list of these functions, see  Share  or  Batch .",
            "title": "Datapoints"
        },
        {
            "location": "/usage/#parameters",
            "text": "Certain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.  aapl = iex(\"AAPL\", displayPercent=True)     Option  Endpoint  Default      displayPercent  quote  False    chartRange  chart  1m    last  news  10    dividendsRange  dividends  1m    splitsRange  splits  1m     Note: specifying options other than the defaults will  significantly  impact performance due to collision between the dividends and splits range options that require separate requests and merging. We have contacted IEX about this issue and hope to resolve it soon.",
            "title": "Parameters"
        },
        {
            "location": "/share/",
            "text": "Share\n\n\nShare(symbol, output_format='json', displayPercent=False, chartRange='1m', last='10', dividendsRange='1m', splitsRange='1m'):\n\n\n\n\nEndpoint Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nOptions\n\n\nReturn Type\n\n\nDescription / Endpoint\n\n\n\n\n\n\n\n\n\n\nrefresh\n\n\n-\n\n\n-\n\n\nUpdates market data\n\n\n\n\n\n\nUniversal Selectors\n\n\n\n\n\n\n\n\n\n\n\n\nget_all\n\n\n-\n\n\njson\n\n\nReturns JSON of all endpoints\n\n\n\n\n\n\nget_select_endpoints\n\n\nmodule (string)\n\n\nvaries\n\n\nReturns selected  endpoint\n\n\n\n\n\n\nIndividual Endpoints\n\n\n\n\n\n\n\n\n\n\n\n\nget_quote\n\n\ndisplayPercent\n\n\njson\n\n\nQuote\n\n\n\n\n\n\nget_chart\n\n\n-\n\n\nlist\n\n\nChart\n\n\n\n\n\n\nget_book\n\n\n-\n\n\njson\n\n\nBook\n\n\n\n\n\n\nget_open_close\n\n\n-\n\n\njson\n\n\nOpen / Close\n\n\n\n\n\n\nget_previous\n\n\n-\n\n\njson\n\n\nPrevious\n\n\n\n\n\n\nget_company\n\n\n-\n\n\njson\n\n\nCompany\n\n\n\n\n\n\nget_key_stats\n\n\n-\n\n\njson\n\n\nKey Stats\n\n\n\n\n\n\nget_relevant\n\n\n-\n\n\njson\n\n\nRelevant\n\n\n\n\n\n\nget_news\n\n\nlast\n\n\nlist\n\n\nNews\n\n\n\n\n\n\nget_financials\n\n\n-\n\n\njson\n\n\nFinancials\n\n\n\n\n\n\nget_earnings\n\n\n-\n\n\njson\n\n\nEarnings\n\n\n\n\n\n\nget_dividends\n\n\nrange\n\n\njson\n\n\nDividends\n\n\n\n\n\n\nget_splits\n\n\nrange\n\n\njson\n\n\nSplits\n\n\n\n\n\n\nget_logo\n\n\n-\n\n\njson\n\n\nLogo\n\n\n\n\n\n\nget_price\n\n\n-\n\n\nfloat\n\n\nPrice\n\n\n\n\n\n\nget_delayed_quote\n\n\n-\n\n\njson\n\n\nDelayed Quote\n\n\n\n\n\n\nget_effective_spread\n\n\n-\n\n\nlist\n\n\nEffective Spread\n\n\n\n\n\n\nget_volume_by_venue\n\n\n-\n\n\nlist\n\n\nVolume by Venue\n\n\n\n\n\n\n\n\nnote: there is no support for the \nlist\n endpoint at this time.\n\n\nDatapoint Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nOptions\n\n\nReturn Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUniversal Selectors\n\n\n\n\n\n\n\n\n\n\n\n\nget_select_datapoints\n\n\nendpoint (string), datapoints (list)\n\n\njson\n\n\nReturns selected data point from selected endpoint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndividual Datapoints\n\n\n\n\n\n\n\n\n\n\n\n\nget_company_name\n\n\n-\n\n\nstring\n\n\n\n\n\n\n\n\nget_primary_exchange\n\n\n-\n\n\nstring\n\n\n\n\n\n\n\n\nget_sector\n\n\n-\n\n\nstring\n\n\n\n\n\n\n\n\nget_open\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_close\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_years_high\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_years_low\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_ytd_change\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_volume\n\n\n-\n\n\nint\n\n\n\n\n\n\n\n\nget_market_cap\n\n\n-\n\n\nint\n\n\n\n\n\n\n\n\nget_beta\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_short_interest\n\n\n-\n\n\nint\n\n\n\n\n\n\n\n\nget_short_ratio\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_latest_eps\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\nget_shares_outstanding\n\n\n-\n\n\nint\n\n\n\n\n\n\n\n\nget_float\n\n\n-\n\n\nint\n\n\n\n\n\n\n\n\nget_eps_consensus\n\n\n-\n\n\nfloat\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\nCertain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.\n\n\naapl = iex(\"AAPL\", displayPercent=True)\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nEndpoint\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndisplayPercent\n\n\nquote\n\n\nFalse\n\n\n\n\n\n\nchartRange\n\n\nchart\n\n\n1m\n\n\n\n\n\n\nlast\n\n\nnews\n\n\n10\n\n\n\n\n\n\ndividendsRange\n\n\ndividends\n\n\n1m\n\n\n\n\n\n\nsplitsRange\n\n\nsplits\n\n\n1m\n\n\n\n\n\n\n\n\nExamples\n\n\n>>> from iexfinance import IexFinance as iex\n>>> tsla = iex('TSLA')\n>>> print(tsla.get_open())\n'299.64'\n>>> print(tsla.get_price())\n'301.84'",
            "title": "Share"
        },
        {
            "location": "/share/#share",
            "text": "Share(symbol, output_format='json', displayPercent=False, chartRange='1m', last='10', dividendsRange='1m', splitsRange='1m'):",
            "title": "Share"
        },
        {
            "location": "/share/#endpoint-methods",
            "text": "Method  Options  Return Type  Description / Endpoint      refresh  -  -  Updates market data    Universal Selectors       get_all  -  json  Returns JSON of all endpoints    get_select_endpoints  module (string)  varies  Returns selected  endpoint    Individual Endpoints       get_quote  displayPercent  json  Quote    get_chart  -  list  Chart    get_book  -  json  Book    get_open_close  -  json  Open / Close    get_previous  -  json  Previous    get_company  -  json  Company    get_key_stats  -  json  Key Stats    get_relevant  -  json  Relevant    get_news  last  list  News    get_financials  -  json  Financials    get_earnings  -  json  Earnings    get_dividends  range  json  Dividends    get_splits  range  json  Splits    get_logo  -  json  Logo    get_price  -  float  Price    get_delayed_quote  -  json  Delayed Quote    get_effective_spread  -  list  Effective Spread    get_volume_by_venue  -  list  Volume by Venue     note: there is no support for the  list  endpoint at this time.",
            "title": "Endpoint Methods"
        },
        {
            "location": "/share/#datapoint-methods",
            "text": "Method  Options  Return Type  Description      Universal Selectors       get_select_datapoints  endpoint (string), datapoints (list)  json  Returns selected data point from selected endpoint          Individual Datapoints       get_company_name  -  string     get_primary_exchange  -  string     get_sector  -  string     get_open  -  float     get_close  -  float     get_years_high  -  float     get_years_low  -  float     get_ytd_change  -  float     get_volume  -  int     get_market_cap  -  int     get_beta  -  float     get_short_interest  -  int     get_short_ratio  -  float     get_latest_eps  -  float     get_shares_outstanding  -  int     get_float  -  int     get_eps_consensus  -  float",
            "title": "Datapoint Methods"
        },
        {
            "location": "/share/#parameters",
            "text": "Certain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.  aapl = iex(\"AAPL\", displayPercent=True)     Option  Endpoint  Default      displayPercent  quote  False    chartRange  chart  1m    last  news  10    dividendsRange  dividends  1m    splitsRange  splits  1m",
            "title": "Parameters"
        },
        {
            "location": "/share/#examples",
            "text": ">>> from iexfinance import IexFinance as iex\n>>> tsla = iex('TSLA')\n>>> print(tsla.get_open())\n'299.64'\n>>> print(tsla.get_price())\n'301.84'",
            "title": "Examples"
        },
        {
            "location": "/batch/",
            "text": "Batch\n\n\nBatch\n acts the same as \nShare\n, except it allows us to access data for up to 100 symbols at once, returning a dictionary of the results indexed by each symbol.\n\n\nBatch(symbolList=[], output_format='json', displayPercent=False, chartRange='1m', last='10', dividendsRange='1m', splitsRange='1m'):\n\n\n\n\nUtility Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nOptions\n\n\nReturn Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrefresh\n\n\n-\n\n\n-\n\n\nUpdate market data\n\n\n\n\n\n\n\n\nEndpoint Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nOptions\n\n\nReturn Type\n\n\nEndpoint Name\n\n\n\n\n\n\n\n\n\n\nUniversal Selectors\n\n\n\n\n\n\n\n\n\n\n\n\nget_all\n\n\n-\n\n\njson\n\n\nReturns JSON of all endpoints\n\n\n\n\n\n\nget_select_endpoints\n\n\nmodule (string)\n\n\njson\n\n\nReturns selected  endpoint\n\n\n\n\n\n\nIndividual Endpoints\n\n\n\n\n\n\n\n\n\n\n\n\nget_quote\n\n\ndisplayPercent\n\n\njson\n\n\nQuote\n\n\n\n\n\n\nget_chart\n\n\n-\n\n\njson\n\n\nChart\n\n\n\n\n\n\nget_book\n\n\n-\n\n\njson\n\n\nBook\n\n\n\n\n\n\nget_open_close\n\n\n-\n\n\njson\n\n\nOpen / Close\n\n\n\n\n\n\nget_previous\n\n\n-\n\n\njson\n\n\nPrevious\n\n\n\n\n\n\nget_company\n\n\n-\n\n\njson\n\n\nCompany\n\n\n\n\n\n\nget_key_stats\n\n\n-\n\n\njson\n\n\nKey Stats\n\n\n\n\n\n\nget_relevant\n\n\n-\n\n\njson\n\n\nRelevant\n\n\n\n\n\n\nget_news\n\n\nlast\n\n\njson\n\n\nNews\n\n\n\n\n\n\nget_financials\n\n\n-\n\n\njson\n\n\nFinancials\n\n\n\n\n\n\nget_earnings\n\n\n-\n\n\njson\n\n\nEarnings\n\n\n\n\n\n\nget_dividends\n\n\nrange\n\n\njson\n\n\nDividends\n\n\n\n\n\n\nget_splits\n\n\nrange\n\n\njson\n\n\nSplits\n\n\n\n\n\n\nget_logo\n\n\n-\n\n\njson\n\n\nLogo\n\n\n\n\n\n\nget_price\n\n\n-\n\n\njson\n\n\nPrice\n\n\n\n\n\n\nget_delayed_quote\n\n\n-\n\n\njson\n\n\nDelayed Quote\n\n\n\n\n\n\nget_effective_spread\n\n\n-\n\n\njson\n\n\nEffective Spread\n\n\n\n\n\n\nget_volume_by_venue\n\n\n-\n\n\njson\n\n\nVolume by Venue\n\n\n\n\n\n\n\n\nnote: there is no support for the \nlist\n endpoint at this time.\n\n\nDatapoint Methods\n\n\n\n\n\n\n\n\nMethod\n\n\nOptions\n\n\nReturn Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUniversal Selectors\n\n\n\n\n\n\n\n\n\n\n\n\nget_select_datapoints\n\n\nendpoint (string), datapoints (list)\n\n\njson\n\n\nReturns selected datapoint from selected endpoint\n\n\n\n\n\n\nIndividual Datapoints\n\n\n\n\n\n\n\n\n\n\n\n\nget_company_name\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_primary_exchange\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_sector\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_open\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_close\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_years_high\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_years_low\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_ytd_change\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_volume\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_market_cap\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_beta\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_short_interest\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_short_ratio\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_latest_eps\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_shares_outstanding\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_float\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\nget_eps_consensus\n\n\n-\n\n\njson\n\n\n-\n\n\n\n\n\n\n\n\nParameters\n\n\nCertain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.\n\n\naapl = iex(\"AAPL\", displayPercent=True)\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nEndpoint\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndisplayPercent\n\n\nquote\n\n\nFalse\n\n\n\n\n\n\nchartRange\n\n\nchart\n\n\n1m\n\n\n\n\n\n\nlast\n\n\nnews\n\n\n10\n\n\n\n\n\n\ndividendsRange\n\n\ndividends\n\n\n1m\n\n\n\n\n\n\nsplitsRange\n\n\nsplits\n\n\n1m\n\n\n\n\n\n\n\n\nExamples\n\n\n>>> from iexfinance import IexFinance as iex\n>>> air_transport = iex(['AAL', 'DAL', 'LUV'])\n>>> print(air_transport.get_open())\n{'AAL' : 299.64, 'DAL' : 49.08, 'LUV' : 0.33}\n>>> print(air_transport.get_price())\n{'AAL' : 222.33, 'DAL' : 5.25, 'LUV' : 0.23}",
            "title": "Batch"
        },
        {
            "location": "/batch/#batch",
            "text": "Batch  acts the same as  Share , except it allows us to access data for up to 100 symbols at once, returning a dictionary of the results indexed by each symbol.  Batch(symbolList=[], output_format='json', displayPercent=False, chartRange='1m', last='10', dividendsRange='1m', splitsRange='1m'):",
            "title": "Batch"
        },
        {
            "location": "/batch/#utility-methods",
            "text": "Method  Options  Return Type  Description      refresh  -  -  Update market data",
            "title": "Utility Methods"
        },
        {
            "location": "/batch/#endpoint-methods",
            "text": "Method  Options  Return Type  Endpoint Name      Universal Selectors       get_all  -  json  Returns JSON of all endpoints    get_select_endpoints  module (string)  json  Returns selected  endpoint    Individual Endpoints       get_quote  displayPercent  json  Quote    get_chart  -  json  Chart    get_book  -  json  Book    get_open_close  -  json  Open / Close    get_previous  -  json  Previous    get_company  -  json  Company    get_key_stats  -  json  Key Stats    get_relevant  -  json  Relevant    get_news  last  json  News    get_financials  -  json  Financials    get_earnings  -  json  Earnings    get_dividends  range  json  Dividends    get_splits  range  json  Splits    get_logo  -  json  Logo    get_price  -  json  Price    get_delayed_quote  -  json  Delayed Quote    get_effective_spread  -  json  Effective Spread    get_volume_by_venue  -  json  Volume by Venue     note: there is no support for the  list  endpoint at this time.",
            "title": "Endpoint Methods"
        },
        {
            "location": "/batch/#datapoint-methods",
            "text": "Method  Options  Return Type  Description      Universal Selectors       get_select_datapoints  endpoint (string), datapoints (list)  json  Returns selected datapoint from selected endpoint    Individual Datapoints       get_company_name  -  json  -    get_primary_exchange  -  json  -    get_sector  -  json  -    get_open  -  json  -    get_close  -  json  -    get_years_high  -  json  -    get_years_low  -  json  -    get_ytd_change  -  json  -    get_volume  -  json  -    get_market_cap  -  json  -    get_beta  -  json  -    get_short_interest  -  json  -    get_short_ratio  -  json  -    get_latest_eps  -  json  -    get_shares_outstanding  -  json  -    get_float  -  json  -    get_eps_consensus  -  json  -",
            "title": "Datapoint Methods"
        },
        {
            "location": "/batch/#parameters",
            "text": "Certain endpoints (such as quote and chart) allow customizable parameters. To specify one of these parameters, merely pass it as a keyword argument.  aapl = iex(\"AAPL\", displayPercent=True)     Option  Endpoint  Default      displayPercent  quote  False    chartRange  chart  1m    last  news  10    dividendsRange  dividends  1m    splitsRange  splits  1m",
            "title": "Parameters"
        },
        {
            "location": "/batch/#examples",
            "text": ">>> from iexfinance import IexFinance as iex\n>>> air_transport = iex(['AAL', 'DAL', 'LUV'])\n>>> print(air_transport.get_open())\n{'AAL' : 299.64, 'DAL' : 49.08, 'LUV' : 0.33}\n>>> print(air_transport.get_price())\n{'AAL' : 222.33, 'DAL' : 5.25, 'LUV' : 0.23}",
            "title": "Examples"
        },
        {
            "location": "/utilities/",
            "text": "Utilities\n\n\nAll available symbols\n\n\nFrom the \nIEX API Docs\n:\n\n\n\n\nUse the /ref-data/symbols endpoint to find the symbols that we support.\n\n\n\n\nIn \niexfinance.utils\n we provide the method \nget_available_symbols\n which accesses this endpoint. This method returns a list of dictionary objects for each symbol, indexed by the key \"symbol\".\n\n\nExample\n\n\nfrom iexfinance.utils import get_available_symbols\n\ndata = get_available_symbols()\n\n# {\"symbol\":\"A\",\"name\":\"Agilent Technologies Inc.\",\"date\":\"2017-11-27\",\"isEnabled\":true,\"type\":\"cs\",\"iexId\":\"2\"}...",
            "title": "Utilities"
        },
        {
            "location": "/utilities/#utilities",
            "text": "",
            "title": "Utilities"
        },
        {
            "location": "/utilities/#all-available-symbols",
            "text": "From the  IEX API Docs :   Use the /ref-data/symbols endpoint to find the symbols that we support.   In  iexfinance.utils  we provide the method  get_available_symbols  which accesses this endpoint. This method returns a list of dictionary objects for each symbol, indexed by the key \"symbol\".",
            "title": "All available symbols"
        },
        {
            "location": "/utilities/#example",
            "text": "from iexfinance.utils import get_available_symbols\n\ndata = get_available_symbols()\n\n# {\"symbol\":\"A\",\"name\":\"Agilent Technologies Inc.\",\"date\":\"2017-11-27\",\"isEnabled\":true,\"type\":\"cs\",\"iexId\":\"2\"}...",
            "title": "Example"
        },
        {
            "location": "/testing/",
            "text": "Under Construction",
            "title": "Testing"
        },
        {
            "location": "/changes/",
            "text": "Changes\n\n\nSee \nchangelog\n.",
            "title": "Change Log"
        },
        {
            "location": "/changes/#changes",
            "text": "See  changelog .",
            "title": "Changes"
        },
        {
            "location": "/about/",
            "text": "Filling a Void\n\n\nIt seemed for a number of years that the primary sources of free US equities data for Python developers were the Yahoo Finance and Google Finance APIs. Given that both of these services were \ndiscontinued\n earlier this year, analysts and developers have begun the search for their replacement. A strong contender for live equities data is the \nInvestors' Exchange\n \nDeveloper Platform\n, a \"reliable, enterprise API\" that is \"free for everyone.\" \n\n\nFor those with concerns that the service will not remain reliable and will not remain free, see below for further discussion. For now, we've benchmarked the API's performance against that of the late Yahoo and Google services and found that, for daily and intraday information, the IEX service is actually quite comparable. And thus with a Python wrapper for IEX's \nStocks\n endpoints we can access this data in a similar way as past. \n\n\niexfinance, a wrapper for this service, is written in a similar fashion as both Lukasz Banasiak's Yahoo Finance wrapper and Hongtao Cai's Google Finance wrapper, allowing for lookup of both individual symbols as well as batch requests. \n\n\nI would like to thank \nLukasz Banasiak\n and \nHongtao Cai\n for their inspiration on this project.",
            "title": "About"
        },
        {
            "location": "/about/#filling-a-void",
            "text": "It seemed for a number of years that the primary sources of free US equities data for Python developers were the Yahoo Finance and Google Finance APIs. Given that both of these services were  discontinued  earlier this year, analysts and developers have begun the search for their replacement. A strong contender for live equities data is the  Investors' Exchange   Developer Platform , a \"reliable, enterprise API\" that is \"free for everyone.\"   For those with concerns that the service will not remain reliable and will not remain free, see below for further discussion. For now, we've benchmarked the API's performance against that of the late Yahoo and Google services and found that, for daily and intraday information, the IEX service is actually quite comparable. And thus with a Python wrapper for IEX's  Stocks  endpoints we can access this data in a similar way as past.   iexfinance, a wrapper for this service, is written in a similar fashion as both Lukasz Banasiak's Yahoo Finance wrapper and Hongtao Cai's Google Finance wrapper, allowing for lookup of both individual symbols as well as batch requests.   I would like to thank  Lukasz Banasiak  and  Hongtao Cai  for their inspiration on this project.",
            "title": "Filling a Void"
        },
        {
            "location": "/tutorial/",
            "text": "Setting up a new environment\n\n\nIdeally, before installing or using iexfinance, we'll create a new virtual environment using \nvirtualenv\n. This will ensure that our packages are isolated from other projects and configured correctly.\n\n\n$ virtualenv env\n$ source env/bin/activate\n\n\n\n\nGetting started\n\n\nOnce our environment is created, we can now install iexfinance. We do so by the following from iexfinance's pypl repository. \n\n\n(env) $ pip install iexfinance\n\n\n\n\nThis will install the latest stable release of iexfinance that is ready for use. Once installed, we can import the library and begin downloading data!\n\n\nRetrieving Data\n\n\niexfinance uses two internal objects, \nShare\n and \nBatch\n to retrieve equities data. \nShare\n is used for single symbols and uses the \n/stock/<symbolname>\n endpoint from IEX. \nBatch\n, however, uses the  \nmarket\n endpoint from \nBatch Requests\n to conduct the retrieval for multiple symbols. \n\n\nSingle Symbol\n\n\nWe'll first work with the following instantiation:\n\n\n>>> from iexfinance import IexFinance as iex\n\n>>> aapl = iex(\"aapl\")\n\n\n\n\nSo, we've called the \nIexFinance\n function and passed it the symbol \"aapl\", for Apple Inc. We've receieved a \nShare\n object in return whose symbol is \"aapl.\" Notice that we have not passed any parameters at instantiation, so our object has used its defaults (see \nShare\n for more information). Should we attempt to pass a symbol not contained in the available symbol list (see \nUtilities\n), an \nIEXSymbolError\n will be raised:\n\n\n>>> aapl = iex(\"aapleee\")\n# IEXSymbolError: Symbol aapleee not found.\n\n\n\n\nAt this point, the wrapper has downloaded all avaiable data for Apple Inc., and we can quickly access certain endpoints and datapoints without the overhead of making multiple API calls for the information. We'll first work with the \nQuote\n endpoint. The IEX Docs for quote:\n\n\nWe see on the right an exact representation of the Quote endpoint's response, in this case a JSON of various datapoints including \"symbol\" and \"companyName\", among others. To retrieve the endpoint as represented, we use the provided \nendpoint method\n \nget_quote\n:\n\n\n>>> aapl.get_quote()\n {\n  \"symbol\": \"AAPL\",\n  \"companyName\": \"Apple Inc.\",\n  \"primaryExchange\": \"Nasdaq Global Select\",\n  \"sector\": \"Technology\",\n  \"calculationPrice\": \"tops\",\n  \"open\": 154,\n  \"openTime\": 1506605400394,\n  \"close\": 153.28,\n  \"closeTime\": 15066054\n   ...\n   }\n\n\n\n\nWe see that \nget_quote\n returns the same as the IEX docs! But what if we don't want the entire endpoint? iexfinance provides a number of \ndatapoint methods\n which allow access to specific items within certain endpoints. For instance, we could use \nget_open\n or \nget_company_name\n to obtain the relevant information:\n\n\n>>> aapl.get_open()\n124.55\n\n>>> aapl.get_company_name()\n\"Apple Inc.\"\n\n\n\n\nA full list of the avaiable \ndatapoint methods\n is provided in the \nShare\n documentation. In addition to these methods, it is possible to obtain one or more datapoints from a specific endpoint, using the \nget_select_datapoints\n method, passing the desired endpoint and a \nstring\n or \nlist\n of desired datapoint(s) as below:\n\n\n>>> aapl.get_select_datapoints(\"quote\", \"symbol\")\n\"AAPL\"\n\n>>> aapl.get_select_datapoints(\"quote\", [\"symbol\", \"calculationPrice\", \"open\"])\n{ \"symbol\" : \"AAPL\", \"calculationPrice\" : \"tops\", \"open\" : 154 } \n\n\n\n\nWe see that \nget_select_datapoints\n returns a \ndict\n of these datapoints, indexed by the keys provided. \nNote: the datapoint names must be entered in the exact formatting as the IEX documentation\n. If we attempt to select an invalid datapoint, an \nIEXDatapointError\n will be raised:\n\n\n>>> aapl.get_select_datapoints(\"quote\", [\"symbol\", \"todaysHigh\", \"open\"])\n#IEXDatapointError: Datapoint todaysHigh not found in endpoint quote\n\n\n\n\nMultiple Symbols\n\n\nFor batch requests, \nIexFinance\n returns a \nBatch\n object, which contains many of the same methods as \nShare\n, but returns data in a \ndict\n indexed by each symbol provided.\n\n\n>>> b = iex([\"aapl\", \"tsla\"])\n>>> b.get_all()\n{\n  \"AAPL\" : {\n    \"quote\": {...},\n    \"news\": [...],\n    \"chart\": [...]\n    ...\n  },\n  \"TSLA\" : {\n    \"quote\": {...},\n    \"news\": [...],\n    \"chart\": [...]\n    ...\n  },\n}\n\n\n\n\nWe can see that the entire dataset, indexed by \"AAPL\" and \"TSLA\", contains each endpoint. To obtain an individual endpoint, we use an \nendpoint method\n as we would with single symbols:\n\n\n>>> b.get_quote()\n\n{\n  \"AAPL\" : {\n    \"symbol\": \"AAPL\",\n    \"companyName\" : \"Apple Inc.\",\n    \"primaryExchange\" : \"Nasdaq Global Select\",\n    ...\n  },\n  \"FB\" : {\n    \"symbol\": \"TSLA\",\n    \"companyName\" : \"Tesla Inc.\",\n    \"primaryExchange\" : \"Nasdaq Global Select\",\n    ...\n  },\n}\n\n\n\n\nWe see that the response of an \nendpoint method\n is also symbol-indexed. This remains true for all methods in \nBatch\n, including \ndatapoint methods\n:\n\n\n>>> b.get_open()\n{ \"AAPL\" : 154, \"TSLA\" : 317.44 }\n\n\n\n\nObtaining multiple endpoints or multiple datapoints from a certain endpoint is easy for multiple symbols:\n\n\n\n>>> b.get_select_datapoints(\"quote\", [\"open\", \"close\"])\n\n{ \"AAPL\" : {\n        \"open\" : 154,\n        \"close\" : 155.55\n        }\n  \"TSLA\" : {\n        \"open\" : 317.44,\n        \"close\" : 314.55\n        } \n}\n\n\n\n\nUpdating Data\n\n\nWhen we call the \nIexFinance\n function, the resulting object calls the \nrefresh\n method at instantiation. This method downloads and obtains the latest market data from IEX. Realtime data is updated to the latest 15 minutes, per the IEX documentation. \n\n\n>>> aapl.refresh()",
            "title": "Tutorial"
        },
        {
            "location": "/tutorial/#setting-up-a-new-environment",
            "text": "Ideally, before installing or using iexfinance, we'll create a new virtual environment using  virtualenv . This will ensure that our packages are isolated from other projects and configured correctly.  $ virtualenv env\n$ source env/bin/activate",
            "title": "Setting up a new environment"
        },
        {
            "location": "/tutorial/#getting-started",
            "text": "Once our environment is created, we can now install iexfinance. We do so by the following from iexfinance's pypl repository.   (env) $ pip install iexfinance  This will install the latest stable release of iexfinance that is ready for use. Once installed, we can import the library and begin downloading data!",
            "title": "Getting started"
        },
        {
            "location": "/tutorial/#retrieving-data",
            "text": "iexfinance uses two internal objects,  Share  and  Batch  to retrieve equities data.  Share  is used for single symbols and uses the  /stock/<symbolname>  endpoint from IEX.  Batch , however, uses the   market  endpoint from  Batch Requests  to conduct the retrieval for multiple symbols.",
            "title": "Retrieving Data"
        },
        {
            "location": "/tutorial/#single-symbol",
            "text": "We'll first work with the following instantiation:  >>> from iexfinance import IexFinance as iex\n\n>>> aapl = iex(\"aapl\")  So, we've called the  IexFinance  function and passed it the symbol \"aapl\", for Apple Inc. We've receieved a  Share  object in return whose symbol is \"aapl.\" Notice that we have not passed any parameters at instantiation, so our object has used its defaults (see  Share  for more information). Should we attempt to pass a symbol not contained in the available symbol list (see  Utilities ), an  IEXSymbolError  will be raised:  >>> aapl = iex(\"aapleee\")\n# IEXSymbolError: Symbol aapleee not found.  At this point, the wrapper has downloaded all avaiable data for Apple Inc., and we can quickly access certain endpoints and datapoints without the overhead of making multiple API calls for the information. We'll first work with the  Quote  endpoint. The IEX Docs for quote:  We see on the right an exact representation of the Quote endpoint's response, in this case a JSON of various datapoints including \"symbol\" and \"companyName\", among others. To retrieve the endpoint as represented, we use the provided  endpoint method   get_quote :  >>> aapl.get_quote()\n {\n  \"symbol\": \"AAPL\",\n  \"companyName\": \"Apple Inc.\",\n  \"primaryExchange\": \"Nasdaq Global Select\",\n  \"sector\": \"Technology\",\n  \"calculationPrice\": \"tops\",\n  \"open\": 154,\n  \"openTime\": 1506605400394,\n  \"close\": 153.28,\n  \"closeTime\": 15066054\n   ...\n   }  We see that  get_quote  returns the same as the IEX docs! But what if we don't want the entire endpoint? iexfinance provides a number of  datapoint methods  which allow access to specific items within certain endpoints. For instance, we could use  get_open  or  get_company_name  to obtain the relevant information:  >>> aapl.get_open()\n124.55\n\n>>> aapl.get_company_name()\n\"Apple Inc.\"  A full list of the avaiable  datapoint methods  is provided in the  Share  documentation. In addition to these methods, it is possible to obtain one or more datapoints from a specific endpoint, using the  get_select_datapoints  method, passing the desired endpoint and a  string  or  list  of desired datapoint(s) as below:  >>> aapl.get_select_datapoints(\"quote\", \"symbol\")\n\"AAPL\"\n\n>>> aapl.get_select_datapoints(\"quote\", [\"symbol\", \"calculationPrice\", \"open\"])\n{ \"symbol\" : \"AAPL\", \"calculationPrice\" : \"tops\", \"open\" : 154 }   We see that  get_select_datapoints  returns a  dict  of these datapoints, indexed by the keys provided.  Note: the datapoint names must be entered in the exact formatting as the IEX documentation . If we attempt to select an invalid datapoint, an  IEXDatapointError  will be raised:  >>> aapl.get_select_datapoints(\"quote\", [\"symbol\", \"todaysHigh\", \"open\"])\n#IEXDatapointError: Datapoint todaysHigh not found in endpoint quote",
            "title": "Single Symbol"
        },
        {
            "location": "/tutorial/#multiple-symbols",
            "text": "For batch requests,  IexFinance  returns a  Batch  object, which contains many of the same methods as  Share , but returns data in a  dict  indexed by each symbol provided.  >>> b = iex([\"aapl\", \"tsla\"])\n>>> b.get_all()\n{\n  \"AAPL\" : {\n    \"quote\": {...},\n    \"news\": [...],\n    \"chart\": [...]\n    ...\n  },\n  \"TSLA\" : {\n    \"quote\": {...},\n    \"news\": [...],\n    \"chart\": [...]\n    ...\n  },\n}  We can see that the entire dataset, indexed by \"AAPL\" and \"TSLA\", contains each endpoint. To obtain an individual endpoint, we use an  endpoint method  as we would with single symbols:  >>> b.get_quote()\n\n{\n  \"AAPL\" : {\n    \"symbol\": \"AAPL\",\n    \"companyName\" : \"Apple Inc.\",\n    \"primaryExchange\" : \"Nasdaq Global Select\",\n    ...\n  },\n  \"FB\" : {\n    \"symbol\": \"TSLA\",\n    \"companyName\" : \"Tesla Inc.\",\n    \"primaryExchange\" : \"Nasdaq Global Select\",\n    ...\n  },\n}  We see that the response of an  endpoint method  is also symbol-indexed. This remains true for all methods in  Batch , including  datapoint methods :  >>> b.get_open()\n{ \"AAPL\" : 154, \"TSLA\" : 317.44 }  Obtaining multiple endpoints or multiple datapoints from a certain endpoint is easy for multiple symbols:  \n>>> b.get_select_datapoints(\"quote\", [\"open\", \"close\"])\n\n{ \"AAPL\" : {\n        \"open\" : 154,\n        \"close\" : 155.55\n        }\n  \"TSLA\" : {\n        \"open\" : 317.44,\n        \"close\" : 314.55\n        } \n}",
            "title": "Multiple Symbols"
        },
        {
            "location": "/tutorial/#updating-data",
            "text": "When we call the  IexFinance  function, the resulting object calls the  refresh  method at instantiation. This method downloads and obtains the latest market data from IEX. Realtime data is updated to the latest 15 minutes, per the IEX documentation.   >>> aapl.refresh()",
            "title": "Updating Data"
        }
    ]
}